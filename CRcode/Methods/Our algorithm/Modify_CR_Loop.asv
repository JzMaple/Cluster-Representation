function [ X ] = Modify_CR_Loop( M, group1, group2, M1, varargin )
%Gragh Matching by impose consistency restraints
% by Yu Tian, 2011
%% Default Parameters
param = struct( ...
    'c', 0.2, ...                   % prob. for walk or reweighted jump?
    'amp_max', 30, ...              % maximum value for amplification procedure
    'iterMax', 300, ...             % maximum value for amplification procedure
    'thresConvergence', 1e-25, ...  % convergence threshold for random walks
    'tolC', 1e-3 ...                % convergence threshold for the Sinkhorn method
);
param = parseargs(param, varargin{:});

%% parameter structure -> parameter value
strField = fieldnames(param);
for i = 1:length(strField), eval([strField{i} '=param.' strField{i} ';']); end
%%
n1 = size(group1,2);
n2 = size(group2,2);
E12 = ones(n1,n2);
nSize = n1*n2;
% t_M = zeros(nSize);
% t_M1 = t_M;
for i = 1:n1
    tmp1 = find(group1(:,i));
    match(tmp1,1) = i;
end
for i = 1:n2
    tmp2 = find(group2(:,i));
    match(tmp2,2) = i;
end

for i = 1:length(match)
    full(i,1) = (match(i,2)-1)*n1+match(i,1);
end

% for i = 1:length(M)
%     t_M1(full(i,1),full(i,1)) = M1(i,i); 
%     for j = 1:length(M)
%         t_M(full(i,1),full(j,1)) = M(i,j);
%     end
% end

%%
nMatch = length(M);
if 0
    I = eye(nMatch);
else
    I = M1*2/3+eye(nMatch)/;
end
d = max(max(M));
lambda = d/500*sqrt(nMatch);

input = ones(nMatch,1)/nMatch;
result = zeros(nMatch,1);
M_minus = M;
Iter = 0;
IterMax = 500;
b_iter = 0;
while b_iter == 0 && Iter < IterMax
    Iter = Iter+1;
    result = CR( M_minus, E12, input, nSize, I, lambda, full);
    if result == input
        b_iter = 1;
    else
        input = result;
    end
end

X = result;
end

%%
    function [result] = CR( M, E12, input, nSize, I, lambda, full_vec)
%         [idx1 ID1] = make_groups(group1);
%         [idx2 ID2] = make_groups(group2);
% 
%         if ID1(end) < ID2(end)
%             [idx1 ID1 idx2 ID2 dumVal dumSize] = make_groups_slack(idx1, ID1, idx2, ID2);
%             dumDim = 1;
%         elseif ID1(end) > ID2(end)
%             [idx2 ID2 idx1 ID1 dumVal dumSize] = make_groups_slack(idx2, ID2, idx1, ID1);
%             dumDim = 2;
%         else
%             dumDim = 0; dumVal = 0; dumSize = 0;
%         end
%         idx1 = idx1-1; idx2 = idx2-1;
        
        %nMatch = length(M);
        lam = lambda;
        bCont = 0;
        iter = 0;
        iterMax = 500;
        tolC = 1e-3;
        
        prev_assign = input;
        prev_assign2 = input;
        final_assign = input;
        final_assign2 = input;
        cur_assign = input;
        cur_score = 0;
        
        M2 = M;
        while 0 == bCont && iter < iterMax
            iter = iter+1;
            cur_result = M2*prev_assign;
            cur_temp = zeros(nSize,1);
            for i = 1:length(full_vec)
                cur_temp(full_vec(i,1),1) = cur_result(i,1);
            end
            cur_mat = postHungarian( E12, cur_temp);
            cur_assign_temp = reshape(cur_mat, nSize, 1);
            for i = 1:length(full_vec)
                cur_assign(i,1) = cur_assign_temp(full_vec(i,1),1);
            end
            
%             cur_exp = exp(100*cur_result);
%             X_slack = [cur_exp; dumVal*ones(dumSize,1)];
%             X_slack = mexBistocNormalize_match_slack(X_slack, int32(idx1), int32(ID1), int32(idx2), int32(ID2), tolC, dumDim, dumVal, int32(1000));
%             cur_soft = X_slack(1:nMatch);
%             cur_assign = greedyMapping(cur_soft, group1, group2);
            
            sumCurAssign = sum(cur_assign); % normalization of sum 1
            if sumCurAssign>0, cur_assign = cur_assign./sumCurAssign; end
            if cur_assign'*M*cur_assign >= cur_score
                final_assign = cur_assign;
                final_assign2 = prev_assign;
            end
            if cur_assign == prev_assign % 说明得到了不变的迭代解
                bCont = 1;
            elseif cur_assign == prev_assign2 % 说明进入了 cur-prev循环
                prev_assign = final_assign;
                prev_assign2 = final_assign2;
                M2 = M2 + lam*I; % 通过增加对角 试图跳出循环
            else
                prev_assign2 = prev_assign;
                prev_assign = cur_assign;
            end
        end
        result = final_assign;
    end
%%
% 要实现的方法：  1.XtMX-->(匈牙利)YtMZ 然后考虑 1.(M+Lambda*I)Y-->...直到收敛
%                                              2.(M+Lambda*I)Z-->...直到收敛 
%                2.XtMX-->1.（匈牙利一步）YtMX 然后考虑 (M+Lambda*I)Y-->...直到收敛
%                         2.（Soft Assign）YtMX 然后考虑 (M+Lambda*I)Y-->...直到收敛
%                3.Lambda 可以 1.固定步长
%                              2. 自适应+固定步长
%                4.可以考虑Xt(M+Lambda*D)X，D衡量点之间的近似度


%X = reshape(final_assign, n1, n2);% cur_assign_mat; % 如果是个好的解 早就存到cur_assign_mat了 返回的是矩阵形式 不是列向量形式


